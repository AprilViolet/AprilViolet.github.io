{"pages":[{"title":"听到涛声的个人博客","text":"个人简介 生活本不易，流人遂自安 个人信息 普通本科软件工程专业 目前主要从事Java后端开发 2020.06大学毕业 二次元 天地为家（说白了就是在外漂泊） 平淡的大学生活，没有啥起伏 万里路需要走，大好河山要看，万卷书也要读，学习更不能停 关于本站本站介绍：本站属于我的个人博客网站，建立本站的初衷也是为了巩固自己所学和记录自己的学习并且分享出去，当然也会记录一些生活事情。个人目前的主要技术方向是从事Javaweb开发，了解一些web前端和大数据相关。 本站概括：本站目前基于hexo搭建，采用的是Icarus主题。发布在GitHub，使用GitHubPage自动部署静态网页。 联系方式:您可以给我发邮件:AprilEternityLT@163.com 岁月仍静好 起风了，唯有努力生存 平凡的世界平凡的我做着平凡的事情活在平凡的世界 不要在晚上考虑事情，晚上是感性的，让自己理性一点 一剪闲云一溪月，一程山水一年华。一世浮生一刹那，一树菩提一烟霞。 往事尘烟","link":"/about/index.html"},{"title":"瞬间光影","text":"","link":"/album/index.html"},{"title":"友链","text":"申请友链须知 - 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请链接前请先添加本博链接，请留言或者发邮件告知。 申请请提供：站点名称、站点链接、站点描述、logo或头像。 会定期清理不符合要求的友链，不再另行通知。","link":"/friend/index.html"},{"title":"留言专区","text":"畅所欲言的同时，也请希望各位嘴下留情 如不能及时回复，您可以发邮件给我 有留必应","link":"/message/index.html"},{"title":"聆听音乐","text":"&nbsp;&nbsp;静下心来，享受一下","link":"/music/index.html"}],"posts":[{"title":"万物之始","text":"喜大普奔 博客上线从大四下学期的十月底开始捣鼓这个博客，到现在也快一个月了，中途因为校招找工作耽误了许久，终于还是被我捣鼓出来了。说实在的中途也想要过放弃不弄了(≧﹏ ≦)因为中途的一些事情，但是最终还是坚持下去，把博客上线了。未来或许会经常更新或许不会经常更新，但是我一直都在，坚持就是胜利，加油，奥利给！ 有任何问题您可以联系我 想说的一些话目的最初就一直想有一个可以记录学习历程的地方，虽然自己也都有记笔记，但是笔记和写博客还是有区别的。 当然我的博客也不仅仅是写一些自己的学习记录，也不仅仅是计算机编程方面的学习，也会记录一些自己的生活日常，可以说是自己的一个写日记之类的地方吧，只不过是公开出去。 感悟道理大都是长大了才懂，我们大多数人都只是一个平凡人，一个普通人，但是也不要去轻易否定自己，不要将自己是一个平凡人作为接口而不去努力，切记！ 不要对社会的不公平太惆怅，这个世界本来就不是公平的。不要对物是人非感慨太多。 看待事情的时候从对立面考虑一下或许另有一番景色。 ​ 二〇一九年十一月二十日 星期三 18:57","link":"/2019/11/02/%E4%B8%87%E7%89%A9%E4%B9%8B%E5%A7%8B/"},{"title":"常用的设计模式总结(一)","text":"常用的设计模式总结设计模式的目的设计模式的目的是为了让程序，具有更好的代码重用性、可读性（编程规范性，便于后期维护和理解）、可扩展性（当需要增加新需求时，非常方便）、可靠性（增加新功能后，对原功能会有影响）、使程序呈现高内聚，低耦合的特性。设计模式包含了面向对象的精髓，“懂了设计模式，就懂得了面向对象分析和设计（OOA/D）的核心”。 虽说在平时开发简单的CRUD的时候可能用到的设计模式并不多，但是如果代码需要重构，需要优化，或者自己去设计一个项目的时候设计模式还是非常重要的！掌握一些常用的设计模式也是非常必要的！ 简单的介绍设计模式的七大原则12 开闭原则：一个软件实体如类、模块和函数应该对扩展开放（提供方）、对修改关闭（使用方） 开闭原则的作用就是在不修改软件源代码的前提下，可以扩展模块的功能。这里的不修改软件源代码指的是不修改已经写好的代码。 开闭原则的实现方法可以通过“抽象约束、封装变化”来实现，即通过设计合理的接口或者抽象类来为软件实体定义一个相对稳定的抽象层，而将可变因素封装在具体实现类中。因此抽象的设计就变得尤为重要，只要抽象的合理，就可以基本保持架构的稳定，而软件中异变的细节可以从抽象派生出来的实现类来进行扩展。当软件需求发生改变时候，只需要重新派生一个实现类就可以来实现扩展了。 里氏替换原则：所有引用基类的地方必须能透明地使用其子类的对象，子类可以扩展父类的功能，但不能改变父类原有的功能。 里氏替换原则通俗来讲就是子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。如果通过重写父类的方法来完成新功能，这样写虽然简单，但是整个继承体系的可复用性较差，特别是使用多态的时候，容易出现问题。 企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类，但是它们并不能飞翔。所以从类的继承关系来看，它们不能继承“鸟”的飞这个方法并去重写“飞”这个方法，所以它们不能定义成“鸟”的子类。 单一职责原则：单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分 单一职责从名字来看就已经很明了了，一个类、接口和方法只负责一项职责，这样可以降低类的复杂度，提供系统的可维护性。如果单一职责原则遵循得好，当修改一个功能时，可以显著降低对其他功能的影响。 接口和方法必须是单一职责，而类的单一职责视情况而定。 接口隔离原则：客户端不应该依赖它不需要的接口类，类之间的依赖关系应该建立在最小的接口上 一句话，就是实现接口的类中，有多余的方法时，需要将接口进行拆分。接口尽量小，但是要有限度，一个接口只服务于一个子模块或业务逻辑。 依赖倒置原则：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象 其核心思想是：要面向接口、抽象编程，不要面向实现编程，这样就降低了客户与实现模块间的耦合。 依赖倒置原则的实现需要注意的是每个类尽量提供接口或者抽象类，或者两者都具备。变量的声明类型尽量是接口或者抽象类。任何类都不应该从具体类派生。使用继承时尽量遵循里氏替换原则 迪米特法则：又叫最少知道原则，一个软件实体应尽可能少地与其他实体发生相互作用 迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块独立，相互之间不存在（或很少有）依赖关系。迪米特法则不希望类之间建立直接的关系。如果真的有需要建立联系，也希望能通过它的中间类来转达。 迪米特法则的实现可以从两个角度来看 从依赖者的角度来看，只依赖应该依赖的对象 从被依赖者的角度来看，只暴露应该暴露的方法 合成复用原则：在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现 如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。 通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点： 继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。 子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。 它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。 合成复用原则的实现是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。 设计模式分类根据目的、用途不同分为三大类：创建型、结构型、行为型 创建型：创建型模式提供了一种在创建对象的同时隐藏创建逻辑的方式。主要特点是将对象的创建与使用分离，使得这些程序在判断针对某个给定实例需要创建哪些对象时更加灵活，这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，只需要使用对象即可。 单例模式 懒汉式 饿汉式 双重检测锁 静态内部类 枚举单例 工厂模式 简单工厂 工厂方法（类创建模式） 抽象工厂 建造者模式 原型模式 结构型：结构性关注类和对象的组合，描述的是如何将类与对象按某种布局组成更大的结构。 适配器模式（类结构型模式和对象结构型模式） 代理模式 装饰模式 外观模式 享元模式 桥接模式 组合模式 行为型：行为型用于描述程序在运行时复杂的流程控制，或者说多个对象之间的通信。即描述多个类或对象之间怎样相互协作共同完成单个对象无法完成的任务。 责任链模式 策略模式 模板方法（类行为型模式） 状态模式 迭代器模式 中介者模式 命令模式 解释器模式（类行为型模式） 访问者模式 观察者模式 备忘录模式 根据处理范围不同，设计模式又可分为类模式和对象模式类模式处理类与子类的关系，通过处理这些关系来建立继承，属于静态关系，在编译时候确定下来。 对象模式处理对象之间的关系，运行时发生变化，属于动态关系。 注：在上面中的设计模式除了特别标注的是类模式，其它的都是对象模式 上面设计模式中加粗的是比较常用并且重要的，需要特别记住，也是本次会详细记录下来的。下一篇会开始记录创建型的四种。 ​ 二〇一九年十二月十三日 星期五 12:38 1.C语言中文网 设计模式 ↩2.CSDN 设计模式-七大原则 ↩","link":"/2019/12/11/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93(%E4%B8%80)/"}],"tags":[{"name":"轨迹","slug":"轨迹","link":"/tags/%E8%BD%A8%E8%BF%B9/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"设计模式","slug":"设计模式","link":"/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"categories":[{"name":"轨迹","slug":"轨迹","link":"/categories/%E8%BD%A8%E8%BF%B9/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"博客","slug":"轨迹/博客","link":"/categories/%E8%BD%A8%E8%BF%B9/%E5%8D%9A%E5%AE%A2/"},{"name":"设计模式","slug":"Java/设计模式","link":"/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]}